{"ast":null,"code":"var _jsxFileName = \"/Users/danielms/Desktop/Programming 2021-2022/Personal-Website/src/Sections/GuessingGame.js\";\nimport React from \"react\";\nimport qBank from \"../assets/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst emptyarr = ['', '', '', '', '', '', '', '', '', '']; //hacked together - otherwise array behaves weirdly\n\nclass GuessingGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionBank: qBank,\n      scoreArray: emptyarr,\n      //Initialized as empty, will take a score\n      currentQuestion: 0,\n      score: 0,\n      selectedAnswer: emptyarr,\n      quizFinished: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.prevQuestion = this.prevQuestion.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.handleChoice = this.handleChoice.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  nextQuestion() {\n    console.log(this.state.scoreArray);\n    if (this.state.selectedAnswer[this.state.currentQuestion] == '') //make sure user selected answer\n      return;\n    if (this.state.currentQuestion > 8) //if it's last question next shouldn't work.\n      return;\n    this.setState(state => {\n      const scoreArray = state.scoreArray.map((item, j) => {\n        if (j === state.currentQuestion) {\n          if (state.questionBank[state.currentQuestion].correct == state.selectedAnswer[state.currentQuestion]) return 1; //here I want to see if they got it right\n          else return 0;\n        } else {\n          console.log(\"test2\");\n          return item;\n        }\n      });\n      console.log(scoreArray);\n      return {\n        scoreArray: scoreArray\n      };\n    }); //testfor correct or false\n\n    console.log(this.state.scoreArray); //increment count here\n\n    this.setState({\n      currentQuestion: this.state.currentQuestion + 1\n    });\n  }\n\n  prevQuestion() {\n    if (this.state.currentQuestion > 0) this.setState({\n      currentQuestion: this.state.currentQuestion - 1\n    });\n  }\n\n  calculateScore() {\n    //going into this function they have to be on the last question\n    if (this.state.selectedAnswer[9] == '') return; //at this point we know they answered something\n\n    let counter = 0;\n\n    for (let elem of this.state.scoreArray) {\n      if (elem == 1) {\n        counter++;\n      }\n    } //can use simple logic to test to see if their last element is right\n\n\n    if (this.state.selectedAnswer[9] == this.state.questionBank[9].correct) counter++; //increment counter - they got last one right\n\n    console.log(counter);\n    this.setState({\n      score: counter,\n      quizFinished: 1\n    });\n    console.log(this.state.scoreArray);\n  }\n\n  handleChoice(event) {\n    console.log(event.target.getAttribute(\"value\")); //have to use get attribute instead of just target.value here.\n\n    this.setState(state => {\n      const selectedAnswer = state.selectedAnswer.map((item, j) => {\n        if (j === state.currentQuestion) {\n          return event.target.getAttribute(\"value\");\n        } else {\n          return item;\n        }\n      });\n      return {\n        selectedAnswer: selectedAnswer\n      };\n    });\n    console.log(this.state.selectedAnswer);\n  }\n\n  resetGame() {\n    this.setState( //just copy and paste original state\n    {\n      questionBank: qBank,\n      scoreArray: emptyarr,\n      //Initialized as empty, will take a score\n      currentQuestion: 0,\n      score: 0,\n      selectedAnswer: emptyarr,\n      quizFinished: 0\n    });\n  }\n\n  render() {\n    const map1 = this.state.questionBank[this.state.currentQuestion].answers.map((item, j) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        value: item,\n        onClick: this.handleChoice,\n        className: item == this.state.selectedAnswer[this.state.currentQuestion] ? 'm-2 border-green-500 border-2 p-2 rounded-md cursor-pointer' : ' m-2 border-red-500 border-2 p-2 rounded-md cursor-pointer',\n        children: [\" \", item, \" \"]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center m-4 font-size-lg font-bold \",\n        id: \"AboutMe\",\n        style: {\n          ScrollMarginTop: \"75px\"\n        },\n        children: \"About Me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"m-4 text-center\",\n        children: \" About Me sections are normally boring, so I made mine an interactive quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), !this.state.quizFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto w-10/12 sm:w-1/2 my-10 bg-gray-200 rounded-lg shadow-xl p-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Question \", this.state.currentQuestion + 1, \" / \", this.state.questionBank.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.questionBank[this.state.currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-row justify-start flex-nowrap\",\n          children: map1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"inline-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.prevQuestion,\n            className: this.state.currentQuestion == 0 ? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l opacity-50 cursor-not-allowed\" : \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l\",\n            children: \" Previous \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.nextQuestion,\n            className: this.state.selectedAnswer[this.state.currentQuestion] == '' || this.state.currentQuestion == 9 ? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r opacity-50 cursor-not-allowed\" : \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r\",\n            children: \" Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this), this.state.currentQuestion == 9 && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.calculateScore,\n          children: \" Calculate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 14\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" Your Score: \", this.state.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GuessingGame;","map":{"version":3,"sources":["/Users/danielms/Desktop/Programming 2021-2022/Personal-Website/src/Sections/GuessingGame.js"],"names":["React","qBank","emptyarr","GuessingGame","Component","constructor","props","state","questionBank","scoreArray","currentQuestion","score","selectedAnswer","quizFinished","nextQuestion","bind","prevQuestion","calculateScore","handleChoice","resetGame","console","log","setState","map","item","j","correct","counter","elem","event","target","getAttribute","render","map1","answers","ScrollMarginTop","length","question"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport qBank from \"../assets/questions\";\n\nconst emptyarr = ['','','','','','','','','','',]; //hacked together - otherwise array behaves weirdly\n\nclass GuessingGame extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            questionBank: qBank,\n            scoreArray: emptyarr, //Initialized as empty, will take a score\n            currentQuestion:0,\n            score:0,\n            selectedAnswer: emptyarr,\n            quizFinished:0,\n        }\n        this.nextQuestion = this.nextQuestion.bind(this);\n        this.prevQuestion = this.prevQuestion.bind(this);\n        this.calculateScore = this.calculateScore.bind(this);\n        this.handleChoice = this.handleChoice.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n    }\n\n    nextQuestion(){\n        console.log(this.state.scoreArray);\n        if (this.state.selectedAnswer[this.state.currentQuestion] =='') //make sure user selected answer\n            return;\n        if (this.state.currentQuestion > 8) //if it's last question next shouldn't work.\n            return;\n        this.setState((state)=>{\n            const scoreArray = state.scoreArray.map((item, j) =>{\n                if (j===state.currentQuestion){\n                    if (state.questionBank[state.currentQuestion].correct == state.selectedAnswer[state.currentQuestion])\n                        return 1; //here I want to see if they got it right\n                    else   \n                        return 0;\n                }else{\n                    console.log(\"test2\");\n                    return item;\n                }\n                });\n                console.log(scoreArray)\n                return {scoreArray: scoreArray};\n            });\n         //testfor correct or false\n        console.log(this.state.scoreArray);\n        //increment count here\n        this.setState({currentQuestion: this.state.currentQuestion+1});\n    }\n\n    prevQuestion(){\n        if (this.state.currentQuestion > 0)\n            this.setState({currentQuestion: this.state.currentQuestion-1});\n    }\n\n    calculateScore(){ //going into this function they have to be on the last question\n        if (this.state.selectedAnswer[9]== '')\n            return;\n\n        //at this point we know they answered something\n        \n\n        let counter=0;\n        for (let elem of this.state.scoreArray){\n            if (elem ==1){\n                counter++;\n            }\n        }\n        //can use simple logic to test to see if their last element is right\n        if (this.state.selectedAnswer[9] == this.state.questionBank[9].correct)\n            counter++; //increment counter - they got last one right\n        \n        console.log(counter);\n        this.setState({score: counter, quizFinished:1});\n        console.log(this.state.scoreArray);\n    }\n\n    handleChoice(event){\n\n        console.log(event.target.getAttribute(\"value\")); //have to use get attribute instead of just target.value here.\n        this.setState((state)=>{\n            const selectedAnswer = state.selectedAnswer.map((item, j) =>{\n                if (j===state.currentQuestion){\n                    return event.target.getAttribute(\"value\");\n                }else{\n                    return item;\n                }\n                });\n                return {selectedAnswer: selectedAnswer};\n            });\n            console.log(this.state.selectedAnswer)\n\n    }\n\n    resetGame(){\n        this.setState(//just copy and paste original state\n           {\n                questionBank: qBank,\n                scoreArray: emptyarr, //Initialized as empty, will take a score\n                currentQuestion:0,\n                score:0,\n                selectedAnswer: emptyarr,\n                quizFinished:0,\n            }\n        )\n    }\n\n    render(){\n        const map1 = this.state.questionBank[this.state.currentQuestion].answers.map((item,j)=>{\n            return <button key={item} value={item} onClick={this.handleChoice} className={item==this.state.selectedAnswer[this.state.currentQuestion]?'m-2 border-green-500 border-2 p-2 rounded-md cursor-pointer':' m-2 border-red-500 border-2 p-2 rounded-md cursor-pointer'}> {item} </button>\n        });\n\n            \n    return (\n\n        \n        <div>\n        <h1 className=\"text-center m-4 font-size-lg font-bold \"\n        id=\"AboutMe\" style={{ScrollMarginTop:\"75px\"}}>About Me</h1>\n        <p className=\"m-4 text-center\"> About Me sections are normally boring, so I made mine an interactive quiz</p>\n        {!this.state.quizFinished\n            ?<div className=\"mx-auto w-10/12 sm:w-1/2 my-10 bg-gray-200 rounded-lg shadow-xl p-4\">\n            <div>Question {this.state.currentQuestion + 1} / {this.state.questionBank.length}</div>\n            <div>{this.state.questionBank[this.state.currentQuestion].question}</div>\n            <div className=\"flex flex-row justify-start flex-nowrap\">{map1}</div>\n            <div className=\"inline-flex\">\n                <button onClick= {this.prevQuestion} className={ (this.state.currentQuestion == 0)? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l opacity-50 cursor-not-allowed\":\"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l\"}> Previous </button>\n                <button onClick = {this.nextQuestion} className={(this.state.selectedAnswer[this.state.currentQuestion] == '' || this.state.currentQuestion==9)?\"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r opacity-50 cursor-not-allowed\":\"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r\"}> Next</button>\n            </div>\n          \n            {this.state.currentQuestion==9 && <button onClick={this.calculateScore}> Calculate</button>}\n            </div>\n            : <>\n            <div> Your Score: {this.state.score}</div>\n            <button onClick={this.resetGame}>Play Again</button>\n            </>\n            \n            }\n        </div>\n\n    );\n    }\n}\n\nexport default GuessingGame;"]},"metadata":{},"sourceType":"module"}