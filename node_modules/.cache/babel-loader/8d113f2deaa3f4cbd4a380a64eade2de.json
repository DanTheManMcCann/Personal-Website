{"ast":null,"code":"var _jsxFileName = \"/Users/danielms/Desktop/Programming 2021-2022/Personal-Website/src/Sections/GuessingGame.js\";\nimport React from \"react\";\nimport qBank from \"../assets/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst emptyarr = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]; //hacked together - otherwise array behaves weirdly\n\nclass GuessingGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionBank: qBank,\n      scoreArray: emptyarr,\n      //Initialized as empty, will take a score\n      currentQuestion: 0,\n      score: 0,\n      selectedAnswer: emptyarr,\n      quizFinished: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.prevQuestion = this.prevQuestion.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.handleChoice = this.handleChoice.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  nextQuestion() {\n    console.log(this.state.scoreArray);\n    if (this.state.selectedAnswer[this.state.currentQuestion] == \"\") //make sure user selected answer\n      return;\n    if (this.state.currentQuestion > 8) //if it's last question next shouldn't work.\n      return;\n    this.setState(state => {\n      const scoreArray = state.scoreArray.map((item, j) => {\n        if (j === state.currentQuestion) {\n          if (state.questionBank[state.currentQuestion].correct == state.selectedAnswer[state.currentQuestion]) return 1; //here I want to see if they got it right\n          else return 0;\n        } else {\n          console.log(\"test2\");\n          return item;\n        }\n      });\n      console.log(scoreArray);\n      return {\n        scoreArray: scoreArray\n      };\n    }); //testfor correct or false\n\n    console.log(this.state.scoreArray); //increment count here\n\n    this.setState({\n      currentQuestion: this.state.currentQuestion + 1\n    });\n  }\n\n  prevQuestion() {\n    if (this.state.currentQuestion > 0) this.setState({\n      currentQuestion: this.state.currentQuestion - 1\n    });\n  }\n\n  calculateScore() {\n    //going into this function they have to be on the last question\n    if (this.state.selectedAnswer[9] == \"\") return; //at this point we know they answered something\n\n    let counter = 0;\n\n    for (let elem of this.state.scoreArray) {\n      if (elem == 1) {\n        counter++;\n      }\n    } //can use simple logic to test to see if their last element is right\n\n\n    if (this.state.selectedAnswer[9] == this.state.questionBank[9].correct) counter++; //increment counter - they got last one right\n\n    console.log(counter);\n    this.setState({\n      score: counter,\n      quizFinished: 1\n    });\n    console.log(this.state.scoreArray);\n  }\n\n  handleChoice(event) {\n    console.log(event.target.getAttribute(\"value\")); //have to use get attribute instead of just target.value here.\n\n    this.setState(state => {\n      const selectedAnswer = state.selectedAnswer.map((item, j) => {\n        if (j === state.currentQuestion) {\n          return event.target.getAttribute(\"value\");\n        } else {\n          return item;\n        }\n      });\n      return {\n        selectedAnswer: selectedAnswer\n      };\n    });\n    console.log(this.state.selectedAnswer);\n  }\n\n  resetGame() {\n    this.setState( //just copy and paste original state\n    {\n      questionBank: qBank,\n      scoreArray: emptyarr,\n      //Initialized as empty, will take a score\n      currentQuestion: 0,\n      score: 0,\n      selectedAnswer: emptyarr,\n      quizFinished: 0\n    });\n  }\n\n  render() {\n    const map1 = this.state.questionBank[this.state.currentQuestion].answers.map((item, j) => {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        value: item,\n        onClick: this.handleChoice,\n        className: item == this.state.selectedAnswer[this.state.currentQuestion] ? \"m-2 border-green-500 border-2 p-2 rounded-md cursor-pointer\" : \" m-2 border-red-500 border-2 p-2 rounded-md cursor-pointer\",\n        children: [\" \", item, \" \"]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"whitesmoke\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-center m-4 font-size-lg font-bold section-header text-xl\",\n        id: \"AboutMe\",\n        style: {\n          ScrollMarginTop: \"75px\"\n        },\n        children: \"About\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pt-2 flex flex-wrap align-center justify-center\",\n        children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"m-4 text-center mx-auto\",\n            children: [\" \", \"About Me sections are normally boring, so I made mine an interactive quiz\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), !this.state.quizFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mx-auto w-10/12 sm:w-1/2 my-10 bg-white border-black rounded-lg shadow-xl p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\"Question \", this.state.currentQuestion + 1, \" /\", \" \", this.state.questionBank.length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: this.state.questionBank[this.state.currentQuestion].question\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex flex-row justify-start flex-nowrap\",\n              children: map1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inline-flex\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.prevQuestion,\n                className: this.state.currentQuestion == 0 ? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l opacity-50 cursor-not-allowed\" : \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l\",\n                children: [\" \", \"Previous\", \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.nextQuestion,\n                className: this.state.selectedAnswer[this.state.currentQuestion] == \"\" || this.state.currentQuestion == 9 ? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r opacity-50 cursor-not-allowed\" : \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r\",\n                children: [\" \", \"Next\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this), this.state.currentQuestion == 9 && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.calculateScore,\n              children: \" Calculate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [\" Your Score: \", this.state.score]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.resetGame,\n              children: \"Play Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"This is a test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GuessingGame;","map":{"version":3,"sources":["/Users/danielms/Desktop/Programming 2021-2022/Personal-Website/src/Sections/GuessingGame.js"],"names":["React","qBank","emptyarr","GuessingGame","Component","constructor","props","state","questionBank","scoreArray","currentQuestion","score","selectedAnswer","quizFinished","nextQuestion","bind","prevQuestion","calculateScore","handleChoice","resetGame","console","log","setState","map","item","j","correct","counter","elem","event","target","getAttribute","render","map1","answers","backgroundColor","ScrollMarginTop","length","question"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport qBank from \"../assets/questions\";\n\nconst emptyarr = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]; //hacked together - otherwise array behaves weirdly\n\nclass GuessingGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionBank: qBank,\n      scoreArray: emptyarr, //Initialized as empty, will take a score\n      currentQuestion: 0,\n      score: 0,\n      selectedAnswer: emptyarr,\n      quizFinished: 0,\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.prevQuestion = this.prevQuestion.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.handleChoice = this.handleChoice.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  nextQuestion() {\n    console.log(this.state.scoreArray);\n    if (this.state.selectedAnswer[this.state.currentQuestion] == \"\")\n      //make sure user selected answer\n      return;\n    if (this.state.currentQuestion > 8)\n      //if it's last question next shouldn't work.\n      return;\n    this.setState((state) => {\n      const scoreArray = state.scoreArray.map((item, j) => {\n        if (j === state.currentQuestion) {\n          if (\n            state.questionBank[state.currentQuestion].correct ==\n            state.selectedAnswer[state.currentQuestion]\n          )\n            return 1;\n          //here I want to see if they got it right\n          else return 0;\n        } else {\n          console.log(\"test2\");\n          return item;\n        }\n      });\n      console.log(scoreArray);\n      return { scoreArray: scoreArray };\n    });\n    //testfor correct or false\n    console.log(this.state.scoreArray);\n    //increment count here\n    this.setState({ currentQuestion: this.state.currentQuestion + 1 });\n  }\n\n  prevQuestion() {\n    if (this.state.currentQuestion > 0)\n      this.setState({ currentQuestion: this.state.currentQuestion - 1 });\n  }\n\n  calculateScore() {\n    //going into this function they have to be on the last question\n    if (this.state.selectedAnswer[9] == \"\") return;\n\n    //at this point we know they answered something\n\n    let counter = 0;\n    for (let elem of this.state.scoreArray) {\n      if (elem == 1) {\n        counter++;\n      }\n    }\n    //can use simple logic to test to see if their last element is right\n    if (this.state.selectedAnswer[9] == this.state.questionBank[9].correct)\n      counter++; //increment counter - they got last one right\n\n    console.log(counter);\n    this.setState({ score: counter, quizFinished: 1 });\n    console.log(this.state.scoreArray);\n  }\n\n  handleChoice(event) {\n    console.log(event.target.getAttribute(\"value\")); //have to use get attribute instead of just target.value here.\n    this.setState((state) => {\n      const selectedAnswer = state.selectedAnswer.map((item, j) => {\n        if (j === state.currentQuestion) {\n          return event.target.getAttribute(\"value\");\n        } else {\n          return item;\n        }\n      });\n      return { selectedAnswer: selectedAnswer };\n    });\n    console.log(this.state.selectedAnswer);\n  }\n\n  resetGame() {\n    this.setState(\n      //just copy and paste original state\n      {\n        questionBank: qBank,\n        scoreArray: emptyarr, //Initialized as empty, will take a score\n        currentQuestion: 0,\n        score: 0,\n        selectedAnswer: emptyarr,\n        quizFinished: 0,\n      }\n    );\n  }\n\n  render() {\n    const map1 = this.state.questionBank[\n      this.state.currentQuestion\n    ].answers.map((item, j) => {\n      return (\n        <button\n          key={item}\n          value={item}\n          onClick={this.handleChoice}\n          className={\n            item == this.state.selectedAnswer[this.state.currentQuestion]\n              ? \"m-2 border-green-500 border-2 p-2 rounded-md cursor-pointer\"\n              : \" m-2 border-red-500 border-2 p-2 rounded-md cursor-pointer\"\n          }\n        >\n          {\" \"}\n          {item}{\" \"}\n        </button>\n      );\n    });\n\n    return (\n      <div style={{ backgroundColor: \"whitesmoke\" }}>\n        <h1\n          className=\"text-center m-4 font-size-lg font-bold section-header text-xl\"\n          id=\"AboutMe\"\n          style={{ ScrollMarginTop: \"75px\" }}\n        >\n          About\n        </h1>\n        <div className=\"pt-2 flex flex-wrap align-center justify-center\">\n          <>\n            <p className=\"m-4 text-center mx-auto\">\n              {\" \"}\n              About Me sections are normally boring, so I made mine an\n              interactive quiz\n            </p>\n            {!this.state.quizFinished ? (\n              <div className=\"mx-auto w-10/12 sm:w-1/2 my-10 bg-white border-black rounded-lg shadow-xl p-4\">\n                <div>\n                  Question {this.state.currentQuestion + 1} /{\" \"}\n                  {this.state.questionBank.length}\n                </div>\n                <div>\n                  {this.state.questionBank[this.state.currentQuestion].question}\n                </div>\n                <div className=\"flex flex-row justify-start flex-nowrap\">\n                  {map1}\n                </div>\n                <div className=\"inline-flex\">\n                  <button\n                    onClick={this.prevQuestion}\n                    className={\n                      this.state.currentQuestion == 0\n                        ? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l opacity-50 cursor-not-allowed\"\n                        : \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-l\"\n                    }\n                  >\n                    {\" \"}\n                    Previous{\" \"}\n                  </button>\n                  <button\n                    onClick={this.nextQuestion}\n                    className={\n                      this.state.selectedAnswer[this.state.currentQuestion] ==\n                        \"\" || this.state.currentQuestion == 9\n                        ? \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r opacity-50 cursor-not-allowed\"\n                        : \"bg-yellow-300 hover:bg-yellow-500 text-yellow 700 font-bold py-2 px-4 rounded-r\"\n                    }\n                  >\n                    {\" \"}\n                    Next\n                  </button>\n                </div>\n\n                {this.state.currentQuestion == 9 && (\n                  <button onClick={this.calculateScore}> Calculate</button>\n                )}\n              </div>\n            ) : (\n              <>\n                <div> Your Score: {this.state.score}</div>\n                <button onClick={this.resetGame}>Play Again</button>\n              </>\n            )}\n          </>\n          <div>This is a test</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GuessingGame;\n"]},"metadata":{},"sourceType":"module"}