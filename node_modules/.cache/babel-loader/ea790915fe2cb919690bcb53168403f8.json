{"ast":null,"code":"var _jsxFileName = \"/Users/danielms/Desktop/Programming 2021-2022/Personal-Website/personal-website/src/Sections/GuessingGame.js\";\nimport React from \"react\";\nimport qBank from \"../assets/questions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst emptyarr = ['', '', '', '', '', '', '', '', '', '']; //hacked together - otherwise array behaves weirdly\n\nclass GuessingGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionBank: qBank,\n      scoreArray: emptyarr,\n      //Initialized as empty, will take a score\n      currentQuestion: 0,\n      score: 0,\n      selectedAnswer: emptyarr,\n      quizFinished: 0\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.prevQuestion = this.prevQuestion.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.handleChoice = this.handleChoice.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n  }\n\n  nextQuestion() {\n    console.log(this.state.scoreArray);\n    this.setState(state => {\n      const scoreArray = state.scoreArray.map((item, j) => {\n        if (j === state.currentQuestion) {\n          if (state.questionBank[state.currentQuestion].correct == state.selectedAnswer[state.currentQuestion]) return 1; //here I want to see if they got it right\n          else console.log(\"blah\" + state.questionBank[state.currentQuestion].answers[state.selectedAnswer[state.currentQuestion]]);\n          return 0;\n        } else {\n          console.log(\"test2\");\n          return item;\n        }\n      });\n      console.log(scoreArray);\n      return {\n        scoreArray: scoreArray\n      };\n    }); //testfor correct or false\n\n    console.log(this.state.scoreArray); //increment count here\n\n    if (this.state.currentQuestion < 9) this.setState({\n      currentQuestion: this.state.currentQuestion + 1\n    });\n  }\n\n  prevQuestion() {\n    if (this.state.currentQuestion > 0) this.setState({\n      currentQuestion: this.state.currentQuestion - 1\n    });\n  }\n\n  calculateScore() {\n    let counter = 0;\n\n    for (let elem of this.state.scoreArray) {\n      if (elem == 1) {\n        counter++;\n      }\n    }\n\n    console.log(counter);\n    this.setState({\n      score: counter,\n      quizFinished: 1\n    });\n    console.log(this.state.scoreArray);\n  }\n\n  handleChoice(event) {\n    console.log(event.target.getAttribute(\"value\")); //have to use get attribute instead of just target.value here.\n\n    this.setState(state => {\n      const selectedAnswer = state.selectedAnswer.map((item, j) => {\n        if (j === state.currentQuestion) {\n          return event.target.getAttribute(\"value\");\n        } else {\n          return item;\n        }\n      });\n      return {\n        selectedAnswer: selectedAnswer\n      };\n    });\n    console.log(this.state.selectedAnswer);\n  }\n\n  resetGame() {}\n\n  render() {\n    const map1 = this.state.questionBank[this.state.currentQuestion].answers.map((item, j) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        value: item,\n        onClick: this.handleChoice,\n        className: item == this.state.selectedAnswer[this.state.currentQuestion] ? 'bg-green-500' : 'bg-red-500',\n        children: [\" hello \", item, \" \"]\n      }, item, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 20\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.quizFinished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Question \", this.state.currentQuestion + 1, \" / \", this.state.questionBank.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.questionBank[this.state.currentQuestion].question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: map1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.prevQuestion,\n          children: \" Previous \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.nextQuestion,\n          children: \" Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Score: \", this.state.score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.calculateScore,\n          children: \" Calculate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.score\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.resetGame,\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default GuessingGame;","map":{"version":3,"sources":["/Users/danielms/Desktop/Programming 2021-2022/Personal-Website/personal-website/src/Sections/GuessingGame.js"],"names":["React","qBank","emptyarr","GuessingGame","Component","constructor","props","state","questionBank","scoreArray","currentQuestion","score","selectedAnswer","quizFinished","nextQuestion","bind","prevQuestion","calculateScore","handleChoice","resetGame","console","log","setState","map","item","j","correct","answers","counter","elem","event","target","getAttribute","render","map1","length","question"],"mappings":"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","sourcesContent":["\nimport React from \"react\";\nimport qBank from \"../assets/questions\";\n\nconst emptyarr = ['','','','','','','','','','',]; //hacked together - otherwise array behaves weirdly\n\nclass GuessingGame extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            questionBank: qBank,\n            scoreArray: emptyarr, //Initialized as empty, will take a score\n            currentQuestion:0,\n            score:0,\n            selectedAnswer: emptyarr,\n            quizFinished:0,\n        }\n        this.nextQuestion = this.nextQuestion.bind(this);\n        this.prevQuestion = this.prevQuestion.bind(this);\n        this.calculateScore = this.calculateScore.bind(this);\n        this.handleChoice = this.handleChoice.bind(this);\n        this.resetGame = this.resetGame.bind(this);\n    }\n\n    nextQuestion(){\n        console.log(this.state.scoreArray);\n        this.setState((state)=>{\n            const scoreArray = state.scoreArray.map((item, j) =>{\n                if (j===state.currentQuestion){\n                    if (state.questionBank[state.currentQuestion].correct == state.selectedAnswer[state.currentQuestion])\n                        return 1; //here I want to see if they got it right\n                    else \n                        console.log(\"blah\" + state.questionBank[state.currentQuestion].answers[state.selectedAnswer[state.currentQuestion]]);  \n                        return 0;\n                }else{\n                    console.log(\"test2\");\n                    return item;\n                }\n                });\n                console.log(scoreArray)\n                return {scoreArray: scoreArray};\n            });\n         //testfor correct or false\n        console.log(this.state.scoreArray);\n        //increment count here\n        if (this.state.currentQuestion < 9)\n            this.setState({currentQuestion: this.state.currentQuestion+1});\n    }\n\n    prevQuestion(){\n        if (this.state.currentQuestion > 0)\n            this.setState({currentQuestion: this.state.currentQuestion-1});\n    }\n\n    calculateScore(){\n        let counter=0;\n        for (let elem of this.state.scoreArray){\n            if (elem ==1){\n                counter++;\n            }\n        }\n        console.log(counter);\n        this.setState({score: counter, quizFinished:1});\n        console.log(this.state.scoreArray);\n    }\n\n    handleChoice(event){\n\n        console.log(event.target.getAttribute(\"value\")); //have to use get attribute instead of just target.value here.\n        this.setState((state)=>{\n            const selectedAnswer = state.selectedAnswer.map((item, j) =>{\n                if (j===state.currentQuestion){\n                    return event.target.getAttribute(\"value\");\n                }else{\n                    return item;\n                }\n                });\n                return {selectedAnswer: selectedAnswer};\n            });\n            console.log(this.state.selectedAnswer)\n\n    }\n\n    resetGame(){\n\n    }\n\n    render(){\n        const map1 = this.state.questionBank[this.state.currentQuestion].answers.map((item,j)=>{\n            return <div key={item} value={item} onClick={this.handleChoice} className={item==this.state.selectedAnswer[this.state.currentQuestion]?'bg-green-500':'bg-red-500'}> hello {item} </div>\n        });\n\n            \n    return (\n\n        \n        <div>\n        {!this.state.quizFinished\n            ?<>\n            <div>Question {this.state.currentQuestion + 1} / {this.state.questionBank.length}</div>\n            <div>{this.state.questionBank[this.state.currentQuestion].question}</div>\n            <div>{map1}</div>\n            <button onClick= {this.prevQuestion}> Previous </button>\n            <button onClick = {this.nextQuestion}> Next</button>\n            <div>Score: {this.state.score}</div>\n            <button onClick={this.calculateScore}> Calculate</button>\n            </>\n            : <>\n            <div>{this.state.score}</div>\n            <button onClick={this.resetGame}>Play Again</button>\n            </>\n            \n            }\n        </div>\n\n    );\n    }\n}\n\nexport default GuessingGame;"]},"metadata":{},"sourceType":"module"}